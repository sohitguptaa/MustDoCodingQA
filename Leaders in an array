Brute-force
`ArrayList<Integer> list = new ArrayList<>();
        for(int i=0;i<n;i++){
            int j;
            for(j=i+1;j<n;j++){
                if(arr[i]<=arr[j]){
                    break;
                }
            }
            if(j==n){
                list.add(arr[i]);
            }
        }
        return list;`

time complexity 0(n2)


  ArrayList<Integer> list = new ArrayList<>();
        int max=arr[n-1];
        list.add(max);
        
        
        for(int i=n-2;i>=0;i--){
            if(max<arr[i]){
                max=arr[i];
                list.add(max);
            }
        }
        return list;
    }

// but in reverse order 


// efficeint solution 
 ArrayList<Integer> list = new ArrayList<>();
       
       int max= arr[n-1];
       
       Stack<Integer> st= new Stack<>();
       
       st.push(arr[n-1]);
       
       for(int i=n-2;i>=0;i--){
           if(arr[i]>=st.peek()){
               st.push(arr[i]);
           }
       }
       
       while(!st.isEmpty()){
           list.add(st.pop());
       }
        return list;
    




       
